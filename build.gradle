buildscript {
    project.ext['CERN_VM'] = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: project.hasProperty('CERN_TECHNET_VM') ?: false
    project.ext['DEPLOYMENT'] = System.getProperty('DEPLOYMENT') ?: false

    repositories {
        if (project['CERN_VM']) {
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
        } else {
            gradlePluginPortal()
        }
    }

    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.5'
        classpath 'io.github.gradle-nexus:publish-plugin:1.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = project['POM.groupId']

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    if (project['CERN_VM']) {
        maven { url 'http://artifactory.cern.ch/ds-jcenter' }
        maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
        /* Temporary workaround for internal CERN dependencies */
        ivy {
            url "http://jmad.web.cern.ch/jmad/static/lib/"
            layout "pattern", { artifact "[artifact]-[revision].[ext]" }
            metadataSources { artifact() }
        }
    }
}

dependencies {
    compile group: 'io.jmad', name: 'jmad-gui', version: '0.13.1'

    compile group: 'cern.dm', name: 'jdataviewer', version: '2.3.0'

    compile group: 'org.springframework', name: 'spring-core', version: '5.3.12'
    compile group: 'org.springframework', name: 'spring-context', version: '5.3.12'

    compile group: 'gov.nist.math', name: 'jama', version: '1.0.3'
    compile group: 'com.google.guava', name: 'guava', version: '30.0-jre'

    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    compile group: 'commons-digester', name: 'commons-digester', version: '2.1'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'

    compile group: 'cern.accsoft.gui', name: 'accsoft-gui-frame', version: '5.1.3'
    compile group: 'cern.accsoft.commons', name: 'accsoft-commons-util', version: '4.2.0'
    compile group: 'cern.accsoft.commons', name: 'accsoft-commons-core', version: '4.1.2'

    compile group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0'
    compile group: 'org.swinglabs', name: 'swingx', version: '1.6.1'
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.18'

    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    testCompile group: 'org.springframework', name: 'spring-test', version: '5.3.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    testCompile group: 'junit', name: 'junit', version: '4.13'
    testCompile group: 'org.easymock', name: 'easymock', version: '4.0.2'
}

wrapper {
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.ALL
}

sourceSets {
    main {
        java { srcDirs = ['src/java'] }
        resources { srcDirs = ['src/java'] }
    }

    test {
        java { srcDirs = ['src/test'] }
        resources { srcDirs = ['src/test'] }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

javadoc { options.encoding = "UTF-8" }

if (!project.tasks.findByName("javadocJar")) {
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
}

if (!project.tasks.findByName("sourcesJar")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

if (!project['CERN_VM']) {
    println 'Applying licensing report'
    apply plugin: 'com.github.jk1.dependency-license-report'

    licenseReport {
        renderers = [this.class.classLoader.loadClass('com.github.jk1.license.render.InventoryHtmlReportRenderer').newInstance()]
        filters = [this.class.classLoader.loadClass('com.github.jk1.license.filter.LicenseBundleNormalizer').newInstance()]
    }
}

if (project['DEPLOYMENT']) {
    println 'Applying deployment scripts'
    apply from: 'https://raw.githubusercontent.com/ossgang/gradle-scripts/master/deployment/deploy-to-maven-central.gradle'
}
